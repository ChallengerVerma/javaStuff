import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {
        // Your existing data
        Map<ClassKey, List<Product>> productMap = new HashMap<>();
        List<Purchase> purchaseList = new ArrayList<>();

        // Assume you have already populated the productMap and purchaseList with data

        // Step 1: Create a Map<ClassKey, List<Purchase>> by filtering and grouping the Purchase list based on the Product IDs present in the productMap
        Map<ClassKey, List<Purchase>> purchasesByClassKey = purchaseList.stream()
                .collect(Collectors.groupingBy(purchase -> {
                    for (Map.Entry<ClassKey, List<Product>> entry : productMap.entrySet()) {
                        if (entry.getValue().stream().anyMatch(product -> product.getProductId() == purchase.getProductId())) {
                            return entry.getKey();
                        }
                    }
                    return null;
                }, Collectors.toList()));

        // Now purchasesByClassKey contains a mapping of each ClassKey to a list of Purchases,
        // where each Purchase has a Product ID present in the productMap
    // Step 3: Sort the List<Purchase> for each ClassKey based on the BigDecimal price
        purchasesByClassKey.values().forEach(purchaseListForClass -> purchaseListForClass.sort(Comparator.comparing(Purchase::getPrice)));

      // Step 4: Create a Map<ClassKey, String> containing the product ID of the median index for each list of Purchase
        Map<ClassKey, String> medianIndexMap = purchasesByClassKey.entrySet().stream()
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        entry -> getProductIdOfMedian(entry.getValue())
                ));

        // Now medianIndexMap contains the product ID of the median index for each list of Purchase for each ClassKey
    }

    // Helper method to calculate the median index
    private static int calculateMedianIndex(int size) {
        return (size % 2 == 0) ? size / 2 - 1 : size / 2;
    }

    // Helper method to get the product ID of the median index
    private static String getProductIdOfMedian(List<Purchase> purchases) {
        int medianIndex = calculateMedianIndex(purchases.size());
        return String.valueOf(purchases.get(medianIndex).getProductId());
    }
 // Helper method to find the ClassKey for a given Purchase based on the productMap
    private static ClassKey findClassKeyForPurchase(Purchase purchase, Map<ClassKey, List<Product>> productMap, ClassKey defaultClassKey) {
        return productMap.entrySet().parallelStream()
                .filter(entry -> entry.getValue().stream().anyMatch(product -> product.getProductId() == purchase.getProductId()))
                .map(Map.Entry::getKey)
                .findFirst()
                .orElse(defaultClassKey);
    }

    // Assume you have classes Product, Purchase, and ClassKey defined with appropriate getters and setters
    static class Product {
        private int productId;
        private BigDecimal price;

        public int getProductId() {
            return productId;
        }

        public BigDecimal getPrice() {
            return price;
        }

        // Other methods and fields for the Product class
    }

    static class Purchase {
        private int productId;
        private BigDecimal price;

        public int getProductId() {
            return productId;
        }

        public BigDecimal getPrice() {
            return price;
        }

        // Other methods and fields for the Purchase class
    }

    static class ClassKey {
        // ClassKey implementation details
    }
}
